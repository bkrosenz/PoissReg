/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 1      Name: Moving Average Simple
 * MaxFile name: MovingAverageSimple
 * Summary:
 * 	TODO: test version, currently uses a lot of code from the appgallery linear regression.  
 * This will go away when the final optimization alg (either Adam or Newton-Raphson) is implemented.
 */
package movingaveragesimple; 

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;

class MovingAverageSimpleKernel extends Kernel {

    private static final DFEType type = dfeFloat(8, 24);
    private static final double eta = 0.01; // gradient descent step
    
	MovingAverageSimpleKernel(KernelParameters parameters) {
		super(parameters);
		
      
		 //scalar input for number of data points
		DFEVar dataPoints = io.scalarInput("dataPoints", type);

		//automatically determine stream offset for carried sums
		//more information in the loop and pipelining tutorial, section 12
		OffsetExpr loopLength = stream.makeOffsetAutoLoop("loopLength");
		DFEVar looplenthVal = loopLength.getDFEVar(this, dfeUInt(8)); // will be 13 ticks for float adder

		//setup chained counters for input data and loop offset
		//more information on nested loops in maxcompiler tutorial, section 9.2
		CounterChain chain = control.count.makeCounterChain();
		DFEVar dataCounter = chain.addCounter(dataPoints.cast(dfeUInt(32)), 1);
		DFEVar loopCounter = chain.addCounter(looplenthVal, 1);

		//stream inputs, slowed down to only take an input every 'looplenthVal' ticks
		//necessary to accommodate the loop offset
		DFEVar x = io.input("x", type, loopCounter === 0);
		DFEVar y = io.input("y", type, loopCounter === 0);

        double betaInit = 0.1;
        
		//compute the accumulated sums of x, x^2, y and x*y
        DFEVar beta_hat = step( x, y, dataCounter, loopLength);

		io.output("beta_hat", beta_hat, type, loopCounter === 0);
	}
	
	// TODO accumulator
	//compute accumulate the input value
	//the offset of the carried sum automatically determined by 'loopLength'
	DFEVar step(DFEVar x, DFEVar y, DFEVar dataCounter, OffsetExpr loopLength){
		DFEVar carriedSum = type.newInstance(this);
		DFEVar beta = (dataCounter===0)? 0.0 : carriedSum;
		DFEVar newSum = beta - eta * ( x*KernelMath.exp(x*beta) - y );
		DFEVar newSumOffset = stream.offset(newSum, -loopLength);
		carriedSum <== newSumOffset;
		return newSum;
    }
}


